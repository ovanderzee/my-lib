{"version":3,"file":"myLib.js","sources":["../src/number/isUsableNumber.ts","../src/string/isCharType.ts","../src/string/isStringType.ts","../src/regex/isExactMatch.ts","../src/math/round.ts","../src/type/isWrappedPrimitive.ts","../src/type/isPrimitive.ts","../src/dom/isAttachedToDom.ts","../src/console/greet.ts","../src/array/arrayCombination.ts","../src/array/arrayIntersection.ts","../src/dom/arrayFromQuery.ts","../src/number/isEqualSigns.ts","../src/string/arrayFromCommaSeparatedList.ts","../src/object/hasOwnProperty.ts","../src/math/groupProperties.ts","../src/type/isFundamental.ts","../src/object/deepClone.ts","../src/string/stringify.ts"],"sourcesContent":["/**\n * Test for values with which calculations can be done\n * @param {Arguments} nums - one or more numeric values to test\n * @returns {boolean} every argument is a usable number\n */\nconst isUsableNumber = function (...nums: number[]): boolean {\n    let isUsable = Boolean(nums.length)\n    const numbers = Array.from(nums)\n    numbers.forEach((value) => {\n        isUsable =\n            isUsable && typeof value === 'number' && Number.isFinite(value)\n    })\n    return isUsable\n}\n\nexport { isUsableNumber }\n","/**\n * Test value for being a character; a string with a length of one\n * @param {string} char\n * @returns {boolean} is a single character\n */\nconst isChar = (char: string): boolean => {\n    return Boolean(char && typeof char === 'string' && char.length === 1)\n}\n\n/**\n * Test value for being a string representation of a digit\n * @param {string} char\n * @returns {boolean} is a number 0-9\n */\nconst isDigit = (char: string): boolean => {\n    return isChar(char) && Boolean(char.match(/[0-9]/))\n}\n\n/**\n * Test value for being a letter\n * @param {string} char\n * @returns {boolean} char is a letter\n */\nconst isLetter = (char: string): boolean => {\n    return isChar(char) && char.toLowerCase() !== char.toUpperCase()\n}\n\n/**\n * Test value for being a lowercase letter\n * @param {string} char\n * @returns {boolean} char is a lower-case letter\n */\nconst isLower = (char: string): boolean => {\n    return (\n        isChar(char) &&\n        char === char.toLowerCase() &&\n        char !== char.toUpperCase()\n    )\n}\n\n/**\n * Test value for being an uppercase letter\n * @param {string} char\n * @returns {boolean} char is a upper-case letter\n */\nconst isUpper = (char: string): boolean => {\n    return (\n        isChar(char) &&\n        char === char.toUpperCase() &&\n        char !== char.toLowerCase()\n    )\n}\n\nexport { isChar, isDigit, isLetter, isLower, isUpper }\n","import { isDigit, isLetter } from './isCharType'\n\n/**\n * Test for being a string consisting of letters and/or digits\n * @param {string} word\n * @returns {boolean} consists of letters and/or digits only\n */\nconst isAlphaNumeric = (word: string): boolean => {\n    return Boolean(\n        word &&\n            word.split &&\n            !word.split('').some((char) => !(isLetter(char) || isDigit(char))),\n    )\n}\n\nexport { isAlphaNumeric }\n","/**\n * Check for a match covering the string entirely\n * @param {string} word\n * @param {RegExp} regex\n * @returns {boolean} all characters of the word were described in regex\n */\nconst isExactMatch = (word: string, regex: RegExp): boolean => {\n    const match = word.match(regex)\n    const result = match && match[0] === word\n    return Boolean(result)\n}\n\nexport { isExactMatch }\n","/**\n * Round at decimals\n * @param {number} origin - any number to round\n * @param {number} decimals - number of decimals to round at\n * @returns {number} the rounded number\n */\nconst roundAtDecimals = function (origin: number, decimals: number): number {\n    // when the returned value would be 0.000...00\n    /* @ts-ignore */\n    if (origin < 1 + 'e-' + decimals && origin > -1 + 'e-' + decimals) {\n        return 0\n    }\n    // https://www.jacklmoore.com/notes/rounding-in-javascript/\n    /* @ts-ignore */\n    return Number(Math.round(origin + 'e' + decimals) + 'e-' + decimals)\n}\n\n/**\n * Round at digits to exponential notation; round with significance\n * @param {number} origin - any number to round\n * @param {number} digits - number of significant digits to round at\n * @returns {string} the rounded number as exponent\n */\nconst roundAtDigitsExponent = function (\n    origin: number,\n    digits: number,\n): string {\n    if (isNaN(origin) || !Number.isInteger(digits) || digits < 1) return 'NaN'\n\n    const absolute = Math.abs(origin)\n    if (absolute === 0) return '0'\n    if (absolute === Infinity) return String(origin)\n\n    const exponent = Math.floor(Math.log(absolute) / Math.log(10))\n    const coefficient = origin / Math.pow(10, exponent)\n    const rounded = roundAtDecimals(coefficient, digits - 1)\n\n    return rounded + 'e' + exponent\n}\n\n/**\n * Round at digits; round with significance\n * @param {number} origin - any number to round\n * @param {number} digits - number of significant digits to round at\n * @returns {number} the rounded number\n */\nconst roundAtDigits = function (origin: number, digits: number): number {\n    const expString = roundAtDigitsExponent(origin, digits)\n    return Number(expString)\n}\n\nexport { roundAtDecimals, roundAtDigitsExponent, roundAtDigits }\n","/**\n * Check the variable for living in an object wrapper\n * These can be generated by new String / Number etc.\n * see https://developer.mozilla.org/en-US/docs/Glossary/Primitive\n * @param {unknown} value - unknown value to check\n * @returns {boolean} is a wrapped primitive\n */\nconst isWrappedPrimitive = function (value: unknown): boolean {\n    const result =\n        typeof value === 'object' &&\n        (value instanceof String ||\n            value instanceof Number ||\n            value instanceof BigInt ||\n            value instanceof Boolean ||\n            value instanceof Symbol)\n\n    return result\n}\n\nexport { isWrappedPrimitive }\n","import { isWrappedPrimitive } from './isWrappedPrimitive'\n\n/**\n * Check value for being a primitive\n * but leave out the anti-value undefined;\n * @param {unknown} value - unknown value to check\n * @returns {boolean} is a primitive\n */\nconst isPrimitive = function (value: unknown): boolean {\n    const typePrimitive =\n        typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean' ||\n        typeof value === 'bigint' ||\n        typeof value === 'symbol'\n\n    return isWrappedPrimitive(value) || typePrimitive\n}\n\nexport { isPrimitive }\n","/**\n * Check node for being part of the DOM\n * @param {Node} node\n * @returns {boolean} true when the node is on the webpage\n */\nconst isAttachedToDom = function (elm: Element): boolean {\n    return (\n        elm &&\n        (elm.getRootNode() instanceof Document ||\n            elm.getRootNode() instanceof ShadowRoot)\n    )\n}\n\nexport { isAttachedToDom }\n","/**\n * The sake of package; log the console\n */\nconst greet = (): void => {\n    // The epic proof of getting through\n    console.log('Hello World!')\n}\n\nexport { greet }\n\n/*\nrespecting the functionality of my predecessor\ndependents on npm\ndependents on github\n*/\n","/**\n * Find unique values from both arrays\n * @param {Array} array1\n * @param {Array} array2\n * @return {Array} the combination\n */\nconst arrayCombination = function (array1: any[], array2: any[]): any[] {\n    const concatination = [...array1, ...array2]\n    const unification = new Set(concatination)\n    return Array.from(unification)\n}\n\nexport { arrayCombination }\n","/**\n * Find unique values appearing in both arrays\n * @param {Array} array1\n * @param {Array} array2\n * @return {Array} the intersection\n */\nconst arrayIntersection = function (array1: any[], array2: any[]): any[] {\n    let lookup: Record<string, number> = {}\n    array1.forEach((member) => (lookup[member] = 1))\n    return array2.filter((member) => {\n        if (lookup[member] === 1) {\n            delete lookup[member]\n            return member\n        }\n    })\n}\n\nexport { arrayIntersection }\n","/**\n * Create a genuine array from a css-query\n * @param {string} cssQuery\n * @returns {Node[]} array with Elements\n */\nconst arrayFromQuery = function (cssQuery: string): Node[] {\n    // the push.apply operation is in most browsers among the fastest\n    // https://jsperf.com/nodelist-to-array/27\n    let elementArray: Node[] = []\n    const nodeList: NodeListOf<Node> = document.querySelectorAll(cssQuery)\n    elementArray.push.apply(elementArray, Array.from(nodeList))\n    return elementArray\n}\n\nexport { arrayFromQuery }\n","/**\n * Check all arguments for being a number with the same sign\n * (Zero is sign-neutral)\n * @param {Arguments} nums - numeric arguments\n * @return {boolean} equality\n */\nconst isEqualSigns = function (...nums: number[]): boolean {\n    let positives: number[] = [...nums].filter((arg) => arg >= 0)\n    let negatives: number[] = [...nums].filter((arg) => arg <= 0)\n    return positives.length === nums.length || negatives.length === nums.length\n}\n\nexport { isEqualSigns }\n","/**\n * Process comma separated list to a sanitised array with normalised strings\n * @param {string} commaSeperatedList\n * @returns {string[]} array with separate strings\n */\nconst arrayFromCommaSeparatedList = function (\n    commaSeparatedList: string,\n): string[] {\n    let list = commaSeparatedList.split(',')\n    // normalise\n    let trimmed = list.map((item) => item.trim().replace(/\\s+/g, ' '))\n    // sanitise\n    return trimmed.filter((item) => {\n        return item.length\n    })\n}\n\nexport { arrayFromCommaSeparatedList }\n","/**\n * Check for existence of property in object\n * @param {object} object\n * @param {string} prop\n * @returns {boolean} the object has the property as its own property -- not inheriting it\n */\nconst hasOwnProperty = function (\n    object: Record<string, unknown>,\n    prop: string,\n): boolean {\n    const hasIt = Object.prototype.hasOwnProperty.call(object, prop)\n    return hasIt\n}\n\nexport { hasOwnProperty }\n","/**\n * Calculate sum of array with Numbers\n * @param {number[]} seq - array containing numbers\n * @return {number} the sum of the numbers\n */\nconst mathSum = (seq: number[]): number => seq.reduce((a, b) => a + b, 0)\n\n/**\n * Calculate average of array with Numbers\n * @param {number[]} seq - array containing numbers\n * @return {number} the average of the numbers\n */\nconst mathAvg = (seq: number[]): number => mathSum(seq) / seq.length || 0\n\nexport { mathSum, mathAvg }\n","import { isWrappedPrimitive } from './isWrappedPrimitive'\n\n/**\n * Check value for indivisible:\n * string, number, boolean, bigint, symbol, undefined, null, function\n * @param {unknown} value - unknown value to test\n * @returns {boolean}\n */\nconst isFundamental = function (value: unknown): boolean {\n    // in general, not an object\n    let result = typeof value !== 'object'\n    // but include null and 'newed' primitives\n    result = result || value === null || isWrappedPrimitive(value)\n    return result\n}\n\nexport { isFundamental }\n","import { isFundamental } from '../type/isFundamental'\n\n/**\n * Recursively copy all indivisible data to new object\n * Pay attention to Date and RegExp objects\n * @param {any} variable - any value to check\n * @returns {any} the same data with different references\n */\nconst deepClone = function (variable: any): any {\n    let product = variable\n    if (isFundamental(variable)) {\n        return variable\n    } else if (Array.isArray(variable)) {\n        product = []\n        for (let value of variable) {\n            product.push(deepClone(value))\n        }\n    } else if (variable instanceof Date) {\n        product = new Date(variable.getTime())\n    } else if (variable instanceof RegExp) {\n        product = new RegExp(variable.source, variable.flags)\n    } else if (typeof variable === 'object') {\n        product = {}\n        for (let [key, value] of Object.entries(variable)) {\n            product[key] = deepClone(value)\n        }\n    }\n\n    return product\n}\n\nexport { deepClone }\n","/**\n * Helper function to produce a string, an empty string if necessary\n * @private\n * @param {any} value\n * @return {String} string represention of anything\n */\nconst finalStringify = function (value: any): string {\n    try {\n        return JSON.stringify(value)\n    } catch (e) {\n        return ''\n    }\n}\n\n/**\n * Try generic ways to produce a string, an empty string if necessary\n * @param {any} value\n * @return {String} string represention of anything\n */\nconst forceStringify = function (value: any): string {\n    let result\n    try {\n        // first coerce to string for the sake of undefined\n        result = String(value)\n        if (result === '[object Object]') {\n            result = finalStringify(value)\n        }\n        return result\n    } catch (e) {\n        return finalStringify(value)\n    }\n}\n\n/**\n * Convert anything to a string, an empty string if necessary.\n * Expect sensible but not consistent cross-environment behaviour on functions.\n * @param {any} value\n * @return {String} string represention of anything\n */\nconst stringify = function (value: any): string {\n    let result\n    try {\n        result = value.toString()\n        if (result === '[object Object]') {\n            result = forceStringify(value)\n        }\n        return result\n    } catch (e) {\n        return forceStringify(value)\n    }\n}\n\nexport { forceStringify, stringify }\n"],"names":["isUsableNumber","nums","isUsable","Boolean","length","Array","from","forEach","value","Number","isFinite","isChar","char","isDigit","match","isLetter","toLowerCase","toUpperCase","isLower","isUpper","isAlphaNumeric","word","split","some","isExactMatch","regex","result","roundAtDecimals","origin","decimals","Math","round","roundAtDigits","digits","expString","isNaN","isInteger","absolute","abs","Infinity","String","exponent","floor","log","coefficient","pow","roundAtDigitsExponent","isWrappedPrimitive","BigInt","Symbol","isPrimitive","typePrimitive","isAttachedToDom","elm","getRootNode","Document","ShadowRoot","greet","console","arrayCombination","array1","array2","concatination","unification","Set","arrayIntersection","lookup","member","filter","arrayFromQuery","cssQuery","elementArray","nodeList","document","querySelectorAll","push","apply","isEqualSigns","positives","arg","negatives","arrayFromCommaSeparatedList","commaSeparatedList","map","item","trim","replace","hasOwnProperty","object","prop","Object","prototype","call","mathSum","seq","reduce","a","b","mathAvg","isFundamental","deepClone","variable","product","isArray","Date","getTime","RegExp","source","flags","key","entries","finalStringify","JSON","stringify","e","forceStringify","toString"],"mappings":"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"}
{"version":3,"file":"myLib.js","sources":["../src/number/isUsableNumber.js","../src/string/isCharType.js","../src/string/isStringType.js","../src/regex/isExactMatch.js","../src/math/round.js","../src/type/isWrappedPrimitive.js","../src/type/isPrimitive.js","../src/dom/isAttachedToDom.js","../src/console/greet.js","../src/array/arrayCombination.js","../src/array/arrayIntersection.js","../src/dom/arrayFromQuery.js","../src/number/isEqualSigns.js","../src/string/arrayFromCommaSeparatedList.js","../src/object/hasOwnProperty.js","../src/math/groupProperties.js","../src/type/isFundamental.js","../src/object/deepClone.js","../src/string/stringify.js","../src/dom/viewPosition.js"],"sourcesContent":["/**\n * Test for values with which calculations can be done\n * @param {Arguments} anonymus - one or more values to test\n * @returns {boolean} every argument is a useable number\n */\nconst isUsableNumber = function () {\n    let isUsable = Boolean(arguments.length)\n    Array.from(arguments).forEach((value) => {\n        isUsable =\n            isUsable && typeof value === 'number' && Number.isFinite(value)\n    })\n    return isUsable\n}\n\nexport { isUsableNumber }\n","/**\n * Test value for being a character; a string with a length of one\n * @param {string} char\n * @returns {boolean} is a single character\n */\nconst isChar = (char) => {\n    return Boolean(char && typeof char === 'string' && char.length === 1)\n}\n\n/**\n * Test value for being a string representation of a digit\n * @param {string} char\n * @returns {boolean} is a number 0-9\n */\nconst isDigit = (char) => {\n    return isChar(char) && Boolean(char.match(/[0-9]/))\n}\n\n/**\n * Test value for being a letter\n * @param {string} char\n * @returns {boolean} char is a letter\n */\nconst isLetter = (char) => {\n    return isChar(char) && char.toLowerCase() !== char.toUpperCase()\n}\n\n/**\n * Test value for being a lowercase letter\n * @param {string} char\n * @returns {boolean} char is a lower-case letter\n */\nconst isLower = (char) => {\n    return (\n        isChar(char) &&\n        char === char.toLowerCase() &&\n        char !== char.toUpperCase()\n    )\n}\n\n/**\n * Test value for being an uppercase letter\n * @param {string} char\n * @returns {boolean} char is a upper-case letter\n */\nconst isUpper = (char) => {\n    return (\n        isChar(char) &&\n        char === char.toUpperCase() &&\n        char !== char.toLowerCase()\n    )\n}\n\nexport { isChar, isDigit, isLetter, isLower, isUpper }\n","import { isDigit, isLetter } from './isCharType'\n\n/**\n * Test for being a string consisting of letters and/or digits\n * @param {string} word\n * @returns {boolean} consists of letters and/or digits only\n */\nconst isAlphaNumeric = (word) => {\n    return (\n        word &&\n        word.split &&\n        !word.split('').some((char) => {\n            return !(isLetter(char) || isDigit(char))\n        })\n    )\n}\n\nexport { isAlphaNumeric }\n","/**\n * Check for a match covering the string entirely\n * @param {string} word\n * @param {RegExp} regex\n * @returns {boolean} all characters of the word were described in regex\n */\nconst isExactMatch = (word, regex) => {\n    const match = word.match(regex)\n    const result = match && match[0] === word\n    return result\n}\n\nexport { isExactMatch }\n","/**\n * Round at decimals\n * @param {number} origin - any number to round\n * @param {number} decimals - number of decimals to round at\n * @returns {number} the rounded number\n */\nconst roundAtDecimals = function (origin, decimals) {\n    // when the returned value would be 0.000...00\n    if (origin < 1 + 'e-' + decimals && origin > -1 + 'e-' + decimals) {\n        return 0\n    }\n    // https://www.jacklmoore.com/notes/rounding-in-javascript/\n    return Number(Math.round(origin + 'e' + decimals) + 'e-' + decimals)\n}\n\n/**\n * Round at digits to exponential notation; round with significance\n * @param {number} origin - any number to round\n * @param {number} digits - number of significant digits to round at\n * @returns {string} the rounded number as exponent\n */\nconst roundAtDigitsExponent = function (origin, digits) {\n    if (isNaN(origin) || !Number.isInteger(digits) || digits < 1) return 'NaN'\n\n    const absolute = Math.abs(origin)\n    if (absolute === 0) return '0'\n    if (absolute === Infinity) return String(origin)\n\n    const exponent = Math.floor(Math.log(absolute) / Math.log(10))\n    const coefficient = origin / Math.pow(10, exponent)\n    const rounded = roundAtDecimals(coefficient, digits - 1)\n\n    return rounded + 'e' + exponent\n}\n\n/**\n * Round at digits; round with significance\n * @param {number} origin - any number to round\n * @param {number} digits - number of significant digits to round at\n * @returns {number} the rounded number\n */\nconst roundAtDigits = function (origin, digits) {\n    const expString = roundAtDigitsExponent(origin, digits)\n    return Number(expString)\n}\n\nexport { roundAtDecimals, roundAtDigitsExponent, roundAtDigits }\n","/**\n * Check the variable for living in an object wrapper\n * These can be generated by new String / Number etc.\n * see https://developer.mozilla.org/en-US/docs/Glossary/Primitive\n * @param {any} value - any value to check\n * @returns {boolean} is a wrapped primitive\n */\nconst isWrappedPrimitive = (value) =>\n    typeof value === 'object' &&\n    (value instanceof String ||\n        value instanceof Number ||\n        //        value instanceof BigInt ||\n        value instanceof Boolean ||\n        value instanceof Symbol)\n\nexport { isWrappedPrimitive }\n","import { isWrappedPrimitive } from './isWrappedPrimitive'\n\n/**\n * Check value for being a primitive\n * but leave out the anti-value undefined;\n * @param {any} value - any value to check\n * @returns {boolean} is a primitive\n */\nconst isPrimitive = function (value) {\n    const typePrimitive =\n        typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean' ||\n        //        typeof value === 'bigint' ||\n        typeof value === 'symbol'\n\n    return isWrappedPrimitive(value) || typePrimitive\n}\n\nexport { isPrimitive }\n","/**\n * Check node for being part of the DOM\n * @param {Node} node\n * @returns {boolean} true when the node is on the webpage\n */\nconst isAttachedToDom = function (elm) {\n    return (\n        elm &&\n        (elm.getRootNode() instanceof Document ||\n            elm.getRootNode() instanceof ShadowRoot)\n    )\n}\n\nexport { isAttachedToDom }\n","/**\n * The sake of package; log the console\n */\nconst greet = () => {\n    // The epic proof of getting through\n    console.log('Hello World!')\n}\n\nexport { greet }\n\n/*\ndependents on npm\n\nmoddi/mark-dream-app\n\ndependents on github\n\nkapunahelewong / library-test-app\ndubzzz / fast-check.github.com\nDimakzela / angular-library-example\nmrucelum / type-for-input-app\nd4046949 / KanBanBoard\nbengabo / angular-library\ndarress / angular9_lib_bugs\nLukasHechenberger / sample-svelte-scss-lib\noOntheway / angular-library\ndubzzz / cra-esm-bug\nfranleplant / inline-react-package-example\nmariosimao / vuetify-error\ndinesh-krish / ionic-angular\nJetBrains / intellij-plugins\nMadz96 / main-app-project\nMadz96 / library-project\nsc0tt5 / angular-library-starter\nripplejb / AngularLibraryUser\nbdsabian / my-lib\narcanis / yarn-pnp-examples\nBrmm / rush-tsc-example\nmattgek / realdolmen_music\nerrakesh2009 / NodeJSDay2\nbochen2014 / webpack4-example\npuresmash / simple-lerna\nsod / npm5-not-a-child\nmanfredsteyer / npm_packages_for_angular\nmanfredsteyer / angular-enterprise-dwx-2017\nmarkbrocato / ext-react-library-example\nzverev / browserify-test\nheltonandreazza / proj\nmanfredsteyer / angular_advanced_enterjs_2017\n\n*/\n","/**\n * Find unique values from both arrays\n * @param {Array} array1\n * @param {Array} array2\n * @return {Array} the combination\n */\nconst arrayCombination = function (array1, array2) {\n    const concatination = [...array1, ...array2]\n    const unification = new Set(concatination)\n    return Array.from(unification)\n}\n\nexport { arrayCombination }\n","/**\n * Find unique values appearing in both arrays\n * @param {Array} array1\n * @param {Array} array2\n * @return {Array} the intersection\n */\nconst arrayIntersection = function (array1, array2) {\n    let lookup = {}\n    array1.forEach((member) => (lookup[member] = 1))\n    return array2.filter((member) => {\n        if (lookup[member] === 1) {\n            delete lookup[member]\n            return member\n        }\n    })\n}\n\nexport { arrayIntersection }\n","/**\n * Create a genuine array from a css-query\n * @param {string} cssQuery\n * @returns {Node[]} array with HTMLElements\n */\nconst arrayFromQuery = function (cssQuery) {\n    // the push.apply operation is in most browsers among the fastest\n    // https://jsperf.com/nodelist-to-array/27\n    let elementArray = []\n    elementArray.push.apply(elementArray, document.querySelectorAll(cssQuery))\n    return elementArray\n}\n\nexport { arrayFromQuery }\n","/**\n * Check all arguments for being a number with the same sign\n * @param {Arguments} anonymus - numeric arguments\n * @return {boolean} equality\n */\nconst isEqualSigns = function () {\n    let positives = [...arguments].filter((arg) => arg >= 0)\n    let negatives = [...arguments].filter((arg) => arg <= 0)\n    return (\n        positives.length === arguments.length ||\n        negatives.length === arguments.length\n    )\n}\n\nexport { isEqualSigns }\n","/**\n * Process comma separated list to a sanitised array with normalised strings\n * @param {string} commaSeperatedList\n * @returns {string[]} array with separate strings\n */\nconst arrayFromCommaSeparatedList = function (commaSeparatedList) {\n    let list = commaSeparatedList.split(',')\n    // normalise\n    let trimmed = list.map((item) => item.trim().replace(/\\s+/g, ' '))\n    // sanitise\n    return trimmed.filter((item) => {\n        return item.length\n    })\n}\n\nexport { arrayFromCommaSeparatedList }\n","/**\n * Check for existence of property in object\n * @param {object} object\n * @param {string} prop\n * @returns {boolean} the object has the property as its own property -- not inheriting it\n */\nconst hasOwnProperty = function (object, prop) {\n    const hasIt = Object.prototype.hasOwnProperty.call(object, prop)\n    return hasIt\n}\n\nexport { hasOwnProperty }\n","/**\n * Calculate sum of array with Numbers\n * @param {number[]} seq - array containing numbers\n * @return {number} the sum of the numbers\n */\nconst mathSum = (seq) => seq.reduce((a, b) => a + b, 0)\n\n/**\n * Calculate average of array with Numbers\n * @param {number[]} seq - array containing numbers\n * @return {number} the average of the numbers\n */\nconst mathAvg = (seq) => mathSum(seq) / seq.length || 0\n\nexport { mathSum, mathAvg }\n","import { isWrappedPrimitive } from './isWrappedPrimitive'\n\n/**\n * Check value for indivisible:\n * string, number, boolean, bigint, symbol, undefined, null, function\n * @param {any} value - value to test\n * @returns {boolean}\n */\nconst isFundamental = function (value) {\n    // in general, not an object\n    let result = typeof value !== 'object'\n    // but include null and 'newed' primitives\n    result = result || value === null || isWrappedPrimitive(value)\n    return result\n}\n\nexport { isFundamental }\n","import { isFundamental } from '../type/isFundamental.js'\n\n/**\n * Recursively copy all indivisible data to new object\n * Pay attention to Date and RegExp objects\n * @param {any} variable - any value to check\n * @returns {any} the same data with different references\n */\nconst deepClone = function (variable) {\n    let product = variable\n    if (isFundamental(variable)) {\n        return variable\n    } else if (Array.isArray(variable)) {\n        product = []\n        for (let value of variable) {\n            product.push(deepClone(value))\n        }\n    } else if (variable instanceof Date) {\n        product = new Date(variable.getTime())\n    } else if (variable instanceof RegExp) {\n        product = new RegExp(variable.source, variable.flags)\n    } else if (typeof variable === 'object') {\n        product = {}\n        for (let [key, value] of Object.entries(variable)) {\n            product[key] = deepClone(value)\n        }\n    }\n\n    return product\n}\n\nexport { deepClone }\n","/**\n * Helper function to produce a string, an empty string if necessary\n * @private\n * @param {any} value\n * @return {String} string represention of anything\n */\nconst finalStringify = function (value) {\n    try {\n        return JSON.stringify(value)\n    } catch (e) {\n        return ''\n    }\n}\n\n/**\n * Try generic ways to produce a string, an empty string if necessary\n * @param {any} value\n * @return {String} string represention of anything\n */\nconst forceStringify = function (value) {\n    let result\n    try {\n        // first coerce to string for the sake of undefined\n        result = String(value)\n        if (result === '[object Object]') {\n            result = finalStringify(value)\n        }\n        return result\n    } catch (e) {\n        return finalStringify(value)\n    }\n}\n\n/**\n * Convert anything to a string, an empty string if necessary.\n * Expect sensible but not consistent cross-environment behaviour on functions.\n * @param {any} value\n * @return {String} string represention of anything\n */\nconst stringify = function (value) {\n    let result\n    try {\n        result = value.toString()\n        if (result === '[object Object]') {\n            result = forceStringify(value)\n        }\n        return result\n    } catch (e) {\n        return forceStringify(value)\n    }\n}\n\nexport { forceStringify, stringify }\n","/**\n * Position element in a two columns, three rows grid of the viewport\n * @param {HTMLElement} target - the element to position\n * @param {Number} offset - distance to maintain\n * @return {Object} specialised functions\n */\nconst viewPosition = function (target, offset) {\n    const docRoot = document.documentElement\n    target.style.position = 'fixed'\n    offset = typeof offset !== 'number' ? offset : 16\n\n    /**\n     * Position at center side of pointer\n     * Good for hints (small, near pointer)\n     * @param {Object} event - mouse event\n     */\n    const pointer = function (event) {\n        event.stopPropagation()\n\n        if (event.clientX / docRoot.clientWidth < 0.5) {\n            // pointer at left, position right of pointer\n            target.style.left = `${event.clientX + offset}px`\n            target.style.right = 'auto'\n        } else {\n            // pointer at right, position left of pointer\n            target.style.left = 'auto'\n            target.style.right = `${\n                docRoot.clientWidth - event.clientX + offset\n            }px`\n        }\n\n        const ySpace = (docRoot.clientHeight - target.clientHeight) / 2\n\n        if (event.clientY < ySpace - offset) {\n            // pointer at top, position under pointer\n            target.style.top = `${event.clientY + offset}px`\n            target.style.bottom = 'auto'\n        } else if (event.clientY < ySpace + offset + target.clientHeight) {\n            // pointer in middle, position aside of pointer\n            target.style.top = `${ySpace}px`\n            target.style.bottom = 'auto'\n        } else {\n            // pointer at bottom, position above pointer\n            target.style.top = 'auto'\n            target.style.bottom = `${\n                docRoot.clientHeight - event.clientY + offset\n            }px`\n        }\n    }\n\n    /**\n     * Position left or right of viewport\n     * Good when with a lot of information (wide)\n     * or when presenting for an audience (same position)\n     * @param {Object} event - mouse event\n     */\n    const aside = function (event) {\n        event.stopPropagation()\n\n        if (event.clientX / docRoot.clientWidth < 0.5) {\n            // pointer at left, position in right column\n            target.style.left = 'auto'\n            target.style.right = `${offset}px`\n        } else {\n            // pointer at right, position in left column\n            target.style.left = `${offset}px`\n            target.style.right = 'auto'\n        }\n\n        // average space above and beneath the element\n        const ySpace = (docRoot.clientHeight - target.clientHeight) / 2\n\n        if (event.clientY < ySpace - offset) {\n            // pointer at top, position in bottom\n            target.style.top = 'auto'\n            target.style.bottom = `${offset}px`\n        } else if (event.clientY < ySpace + offset + target.clientHeight) {\n            // pointer in middle, position aside of pointer\n            target.style.top = `${ySpace}px`\n            target.style.bottom = 'auto'\n        } else {\n            // pointer at bottom, position in top\n            target.style.top = `${offset}px`\n            target.style.bottom = 'auto'\n        }\n    }\n\n    return {\n        aside: aside,\n        pointer: pointer,\n    }\n}\n\nexport { viewPosition }\n\n// TODO\n// make it useable in portrait screens\n// return a style object apply it with Object.assign\n// look at pointer events\n// aside == edge\n\n// horizontalLandscapeCentric  2 col\n// horizontalSquareCentric\n// horizontalPortaitCentric\n// verticalLandscapeCentric  3 row\n// verticalSquareCentric\n// verticalPortaitCentric\n"],"names":["isUsableNumber","isUsable","Boolean","arguments","length","Array","from","forEach","value","Number","isFinite","isChar","char","isDigit","match","isLetter","toLowerCase","toUpperCase","isLower","isUpper","isAlphaNumeric","word","split","some","isExactMatch","regex","roundAtDecimals","origin","decimals","Math","round","roundAtDigits","digits","expString","isNaN","isInteger","absolute","abs","Infinity","String","exponent","floor","log","coefficient","pow","roundAtDigitsExponent","isWrappedPrimitive","Symbol","isPrimitive","typePrimitive","isAttachedToDom","elm","getRootNode","Document","ShadowRoot","greet","console","arrayCombination","array1","array2","concatination","unification","Set","arrayIntersection","lookup","member","filter","arrayFromQuery","cssQuery","elementArray","push","apply","document","querySelectorAll","isEqualSigns","positives","arg","negatives","arrayFromCommaSeparatedList","commaSeparatedList","map","item","trim","replace","hasOwnProperty","object","prop","Object","prototype","call","mathSum","seq","reduce","a","b","mathAvg","isFundamental","result","deepClone","variable","product","isArray","Date","getTime","RegExp","source","flags","key","entries","finalStringify","JSON","stringify","e","forceStringify","toString","viewPosition","target","offset","docRoot","documentElement","style","position","aside","event","stopPropagation","clientX","clientWidth","left","right","ySpace","clientHeight","clientY","top","bottom","pointer"],"mappings":"AAKK,MAACA,EAAiB,WACnB,IAAIC,EAAWC,QAAQC,UAAUC,QAKjC,OAJAC,MAAMC,KAAKH,WAAWI,QAASC,IAC3BP,EACIA,GAA6B,iBAAVO,GAAsBC,OAAOC,SAASF,KAE1DP,GCNLU,EAAUC,GACLV,QAAQU,GAAwB,iBAATA,GAAqC,IAAhBA,EAAKR,QAQtDS,EAAWD,GACND,EAAOC,IAASV,QAAQU,EAAKE,MAAM,UAQxCC,EAAYH,GACPD,EAAOC,IAASA,EAAKI,gBAAkBJ,EAAKK,cAQjDC,EAAWN,GAETD,EAAOC,IACPA,IAASA,EAAKI,eACdJ,IAASA,EAAKK,cAShBE,EAAWP,GAETD,EAAOC,IACPA,IAASA,EAAKK,eACdL,IAASA,EAAKI,cC1ChBI,EAAkBC,GAEhBA,GACAA,EAAKC,QACJD,EAAKC,MAAM,IAAIC,KAAMX,KACTG,EAASH,IAASC,EAAQD,KCNzCY,EAAe,CAACH,EAAMI,KACxB,MAAMX,EAAQO,EAAKP,MAAMW,GAEzB,OADeX,GAASA,EAAM,KAAOO,GCFnCK,EAAkB,SAAUC,EAAQC,GAEtC,OAAID,EAAS,MAAWC,GAAYD,EAAS,OAAYC,EAC9C,EAGJnB,OAAOoB,KAAKC,MAAMH,EAAS,IAAMC,GAAY,KAAOA,IA6BzDG,EAAgB,SAAUJ,EAAQK,GACpC,MAAMC,EArBoB,SAAUN,EAAQK,GAC5C,GAAIE,MAAMP,KAAYlB,OAAO0B,UAAUH,IAAWA,EAAS,EAAG,MAAO,MAErE,MAAMI,EAAWP,KAAKQ,IAAIV,GAC1B,GAAiB,IAAbS,EAAgB,MAAO,IAC3B,GAAIA,IAAaE,EAAAA,EAAU,OAAOC,OAAOZ,GAEzC,MAAMa,EAAWX,KAAKY,MAAMZ,KAAKa,IAAIN,GAAYP,KAAKa,IAAI,KACpDC,EAAchB,EAASE,KAAKe,IAAI,GAAIJ,GAG1C,OAFgBd,EAAgBiB,EAAaX,EAAS,GAErC,IAAMQ,EAULK,CAAsBlB,EAAQK,GAChD,OAAOvB,OAAOwB,ICpCZa,EAAsBtC,GACP,iBAAVA,IACNA,aAAiB+B,QACd/B,aAAiBC,QAEjBD,aAAiBN,SACjBM,aAAiBuC,QCLnBC,EAAc,SAAUxC,GAC1B,MAAMyC,EACe,iBAAVzC,GACU,iBAAVA,GACU,kBAAVA,GAEU,iBAAVA,EAEX,OAAOsC,EAAmBtC,IAAUyC,GCXlCC,EAAkB,SAAUC,GAC9B,OACIA,IACCA,EAAIC,wBAAyBC,UAC1BF,EAAIC,wBAAyBE,aCNnCC,EAAQ,KAEVC,QAAQd,IAAI,iBCCVe,EAAmB,SAAUC,EAAQC,GACvC,MAAMC,EAAgB,IAAIF,KAAWC,GAC/BE,EAAc,IAAIC,IAAIF,GAC5B,OAAOvD,MAAMC,KAAKuD,ICHhBE,EAAoB,SAAUL,EAAQC,GACxC,IAAIK,EAAS,GAEb,OADAN,EAAOnD,QAAS0D,GAAYD,EAAOC,GAAU,GACtCN,EAAOO,OAAQD,IAClB,GAAuB,IAAnBD,EAAOC,GAEP,cADOD,EAAOC,GACPA,KCPbE,EAAiB,SAAUC,GAG7B,IAAIC,EAAe,GAEnB,OADAA,EAAaC,KAAKC,MAAMF,EAAcG,SAASC,iBAAiBL,IACzDC,GCLLK,EAAe,WACjB,IAAIC,EAAY,IAAIxE,WAAW+D,OAAQU,GAAQA,GAAO,GAClDC,EAAY,IAAI1E,WAAW+D,OAAQU,GAAQA,GAAO,GACtD,OACID,EAAUvE,SAAWD,UAAUC,QAC/ByE,EAAUzE,SAAWD,UAAUC,QCLjC0E,EAA8B,SAAUC,GAK1C,OAJWA,EAAmBzD,MAAM,KAEjB0D,IAAKC,GAASA,EAAKC,OAAOC,QAAQ,OAAQ,MAE9CjB,OAAQe,GACZA,EAAK7E,SCLdgF,EAAiB,SAAUC,EAAQC,GAErC,OADcC,OAAOC,UAAUJ,eAAeK,KAAKJ,EAAQC,ICFzDI,EAAWC,GAAQA,EAAIC,OAAO,CAACC,EAAGC,IAAMD,EAAIC,EAAG,GAO/CC,EAAWJ,GAAQD,EAAQC,GAAOA,EAAIvF,QAAU,ECJhD4F,EAAgB,SAAUxF,GAE5B,IAAIyF,EAA0B,iBAAVzF,EAGpB,OADAyF,EAASA,GAAoB,OAAVzF,GAAkBsC,EAAmBtC,GACjDyF,GCLLC,EAAY,SAAUC,GACxB,IAAIC,EAAUD,EACd,GAAIH,EAAcG,GACd,OAAOA,EACJ,GAAI9F,MAAMgG,QAAQF,GAAW,CAChCC,EAAU,GACV,IAAK,IAAI5F,KAAS2F,EACdC,EAAQ9B,KAAK4B,EAAU1F,SAExB,GAAI2F,aAAoBG,KAC3BF,EAAU,IAAIE,KAAKH,EAASI,gBACzB,GAAIJ,aAAoBK,OAC3BJ,EAAU,IAAII,OAAOL,EAASM,OAAQN,EAASO,YAC5C,GAAwB,iBAAbP,EAAuB,CACrCC,EAAU,GACV,IAAK,IAAKO,EAAKnG,KAAU+E,OAAOqB,QAAQT,GACpCC,EAAQO,GAAOT,EAAU1F,GAIjC,OAAO4F,GCtBLS,EAAiB,SAAUrG,GAC7B,IACI,OAAOsG,KAAKC,UAAUvG,GACxB,MAAOwG,GACL,MAAO,KASTC,EAAiB,SAAUzG,GAC7B,IAAIyF,EACJ,IAMI,OAJAA,EAAS1D,OAAO/B,GACD,oBAAXyF,IACAA,EAASY,EAAerG,IAErByF,EACT,MAAOe,GACL,OAAOH,EAAerG,KAUxBuG,EAAY,SAAUvG,GACxB,IAAIyF,EACJ,IAKI,OAJAA,EAASzF,EAAM0G,WACA,oBAAXjB,IACAA,EAASgB,EAAezG,IAErByF,EACT,MAAOe,GACL,OAAOC,EAAezG,KC1CxB2G,EAAe,SAAUC,EAAQC,GACnC,MAAMC,EAAU9C,SAAS+C,gBACzBH,EAAOI,MAAMC,SAAW,QACxBJ,EAA2B,iBAAXA,EAAsBA,EAAS,GA8E/C,MAAO,CACHK,MAhCU,SAAUC,GACpBA,EAAMC,kBAEFD,EAAME,QAAUP,EAAQQ,YAAc,IAEtCV,EAAOI,MAAMO,KAAO,OACpBX,EAAOI,MAAMQ,MAAWX,EAAH,OAGrBD,EAAOI,MAAMO,KAAUV,EAAH,KACpBD,EAAOI,MAAMQ,MAAQ,QAIzB,MAAMC,GAAUX,EAAQY,aAAed,EAAOc,cAAgB,EAE1DP,EAAMQ,QAAUF,EAASZ,GAEzBD,EAAOI,MAAMY,IAAM,OACnBhB,EAAOI,MAAMa,OAAYhB,EAAH,MACfM,EAAMQ,QAAUF,EAASZ,EAASD,EAAOc,cAEhDd,EAAOI,MAAMY,IAASH,EAAH,KACnBb,EAAOI,MAAMa,OAAS,SAGtBjB,EAAOI,MAAMY,IAASf,EAAH,KACnBD,EAAOI,MAAMa,OAAS,SAM1BC,QAzEY,SAAUX,GACtBA,EAAMC,kBAEFD,EAAME,QAAUP,EAAQQ,YAAc,IAEtCV,EAAOI,MAAMO,KAAUJ,EAAME,QAAUR,EAAnB,KACpBD,EAAOI,MAAMQ,MAAQ,SAGrBZ,EAAOI,MAAMO,KAAO,OACpBX,EAAOI,MAAMQ,MACTV,EAAQQ,YAAcH,EAAME,QAAUR,EADrB,MAKzB,MAAMY,GAAUX,EAAQY,aAAed,EAAOc,cAAgB,EAE1DP,EAAMQ,QAAUF,EAASZ,GAEzBD,EAAOI,MAAMY,IAAST,EAAMQ,QAAUd,EAAnB,KACnBD,EAAOI,MAAMa,OAAS,QACfV,EAAMQ,QAAUF,EAASZ,EAASD,EAAOc,cAEhDd,EAAOI,MAAMY,IAASH,EAAH,KACnBb,EAAOI,MAAMa,OAAS,SAGtBjB,EAAOI,MAAMY,IAAM,OACnBhB,EAAOI,MAAMa,OACTf,EAAQY,aAAeP,EAAMQ,QAAUd,EADrB"}
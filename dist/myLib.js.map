{"version":3,"file":"myLib.js","sources":["../src/string/isCharType.js","../src/math/round.js","../src/string/isStringType.js","../src/regex/isExactMatch.js","../src/number/isUsableNumber.js"],"sourcesContent":["/**\n * Helper Test for being a string with length 1\n * @param {string} char\n * @returns {boolean} is a single character\n */\nconst isChar = (char) => {\n    return Boolean(char && typeof char === 'string' && char.length === 1)\n}\n\n/**\n * Test for being a string representation of a digit\n * @param {string} char\n * @returns {boolean} is a number 0-9\n */\nconst isDigit = (char) => {\n    return isChar(char) && Boolean(char.match(/[0-9]/))\n}\n\n/**\n * Test for being a letter\n * @param {string} char\n * @returns {boolean} char is a letter\n */\nconst isLetter = (char) => {\n    return isChar(char) && char.toLowerCase() !== char.toUpperCase()\n}\n\n/**\n * Test for being a lowercase letter\n * @param {string} char\n * @returns {boolean} char is a lower-case letter\n */\nconst isLower = (char) => {\n    return (\n        isChar(char) &&\n        char === char.toLowerCase() &&\n        char !== char.toUpperCase()\n    )\n}\n\n/**\n * Test for being an uppercase letter\n * @param {string} char\n * @returns {boolean} char is a upper-case letter\n */\nconst isUpper = (char) => {\n    return (\n        isChar(char) &&\n        char === char.toUpperCase() &&\n        char !== char.toLowerCase()\n    )\n}\n\nexport { isChar, isDigit, isLetter, isLower, isUpper }\n","/**\n * Round at decimals\n * @param {number} origin - any number to round\n * @param {number} decimals - number of decimals to round at\n * @returns {number} the rounded number\n */\nconst roundAtDecimals = function (origin, decimals) {\n    if (origin < 1 + 'e-' + decimals && origin > -1 + 'e-' + decimals) {\n        return 0\n    }\n    // https://www.jacklmoore.com/notes/rounding-in-javascript/\n    return Number(Math.round(origin + 'e' + decimals) + 'e-' + decimals)\n}\n\n/**\n * Round at digits; round with significance\n * @param {number} origin - any number to round\n * @param {number} digits - number of digits to round at\n * @returns {number} the rounded number\n */\nconst roundAtDigits = function (origin, digits) {\n    const exponent = Math.floor(Math.log(Math.abs(origin)) / Math.log(10))\n    const coefficient = origin / Math.pow(10, exponent)\n    const rounded = roundAtDecimals(coefficient, digits - 1)\n\n    return Number(rounded + 'e' + exponent)\n}\n\nexport { roundAtDecimals, roundAtDigits }\n","import { isDigit, isLetter } from './isCharType'\n\n/**\n * Test for being a string consisting of letters and/or digits\n * @param {string} line\n * @returns {boolean} consists of letters and/or digits only\n */\nconst isAlphaNumeric = (line) => {\n    return (\n        line &&\n        line.split &&\n        !line.split('').some((char) => {\n            return !(isLetter(char) || isDigit(char))\n        })\n    )\n}\n\nexport { isAlphaNumeric }\n","/**\n * Check for a match covering the string entirely\n * @param {string} word\n * @param {RegExp} regex\n * @returns {boolean}\n */\nconst isExactMatch = (word, regex) => {\n    const match = word.match(regex)\n    const result = match && match[0] === word\n    return result\n}\n\nexport { isExactMatch }\n","/**\n * Test for values with which calculations can be done\n * @param {Arguments} anonymus - one or more values to test\n * @returns {boolean} every argument is a useable number\n */\nconst isUsableNumber = function () {\n    let isUsable = Boolean(arguments.length)\n    Array.from(arguments).forEach((value) => {\n        isUsable =\n            isUsable && typeof value === 'number' && Number.isFinite(value)\n    })\n    return isUsable\n}\n\nexport { isUsableNumber }\n"],"names":["isChar","char","Boolean","length","isDigit","match","isLetter","toLowerCase","toUpperCase","roundAtDecimals","origin","decimals","Number","Math","round","line","split","some","word","regex","isUsable","arguments","Array","from","forEach","value","isFinite","digits","exponent","floor","log","abs","coefficient","pow","rounded"],"mappings":"yMAKMA,EAAUC,GACLC,QAAQD,GAAwB,iBAATA,GAAqC,IAAhBA,EAAKE,QAQtDC,EAAWH,GACND,EAAOC,IAASC,QAAQD,EAAKI,MAAM,UAQxCC,EAAYL,GACPD,EAAOC,IAASA,EAAKM,gBAAkBN,EAAKO,cClBjDC,EAAkB,SAAUC,EAAQC,GACtC,OAAID,EAAS,MAAWC,GAAYD,EAAS,OAAYC,EAC9C,EAGJC,OAAOC,KAAKC,MAAMJ,EAAS,IAAMC,GAAY,KAAOA,qBCJvCI,GAEhBA,GACAA,EAAKC,QACJD,EAAKC,MAAM,IAAIC,KAAMhB,KACTK,EAASL,IAASG,EAAQH,2CCN1B,CAACiB,EAAMC,KACxB,MAAMd,EAAQa,EAAKb,MAAMc,GAEzB,OADed,GAASA,EAAM,KAAOa,0BHwBxBjB,GAETD,EAAOC,IACPA,IAASA,EAAKM,eACdN,IAASA,EAAKO,wBASLP,GAETD,EAAOC,IACPA,IAASA,EAAKO,eACdP,IAASA,EAAKM,+BI5CC,WACnB,IAAIa,EAAWlB,QAAQmB,UAAUlB,QAKjC,OAJAmB,MAAMC,KAAKF,WAAWG,QAASC,IAC3BL,EACIA,GAA6B,iBAAVK,GAAsBb,OAAOc,SAASD,KAE1DL,uCHSW,SAAUV,EAAQiB,GACpC,MAAMC,EAAWf,KAAKgB,MAAMhB,KAAKiB,IAAIjB,KAAKkB,IAAIrB,IAAWG,KAAKiB,IAAI,KAC5DE,EAActB,EAASG,KAAKoB,IAAI,GAAIL,GACpCM,EAAUzB,EAAgBuB,EAAaL,EAAS,GAEtD,OAAOf,OAAOsB,EAAU,IAAMN"}
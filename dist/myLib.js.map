{"version":3,"file":"myLib.js","sources":["../src/number/isUsableNumber.js","../src/string/isCharType.js","../src/string/isStringType.js","../src/regex/isExactMatch.js"],"sourcesContent":["\n/**\n * Test for values with which calculations can be done\n * @param {arguments} anonymus - one or more values to test\n * @returns {boolean} every argument is a useable number\n */\n const isUsableNumber = function () {\n    let isUsable = Boolean(arguments.length)\n    Array.from(arguments).forEach(value => {\n        isUsable =\n            isUsable && typeof value === 'number' && Number.isFinite(value)\n    })\n    return isUsable\n}\n\nexport { isUsableNumber }\n","\n/**\n * Helper Test for being a string with length 1\n * @param {String} char\n * @returns {Boolean} is a single character\n */\nconst isChar = char => {\n    return Boolean(char && typeof char === 'string' && char.length === 1)\n}\n\n/**\n * Test for being a string representation of a digit\n * @param {String} char\n * @returns {Boolean} is a number 0-9\n */\nconst isDigit = char => {\n    return isChar(char) && Boolean(char.match(/[0-9]/))\n}\n\n/**\n * Test for being a letter\n * @param {String} char\n * @returns {Boolaen} char is a letter\n */\nconst isLetter = char => {\n    return isChar(char) && char.toLowerCase() !== char.toUpperCase()\n}\n\n/**\n * Test for being a lowercase letter\n * @param {String} char\n * @returns {Boolaen} char is a lower-case letter\n */\nconst isLower = char => {\n    return (\n        isChar(char) &&\n        char === char.toLowerCase() &&\n        char !== char.toUpperCase()\n    )\n}\n\n/**\n * Test for being an uppercase letter\n * @param {String} char\n * @returns {Boolaen} char is a upper-case letter\n */\nconst isUpper = char => {\n    return (\n        isChar(char) &&\n        char === char.toUpperCase() &&\n        char !== char.toLowerCase()\n    )\n}\n\nexport { isChar, isDigit, isLetter, isLower, isUpper }\n","import { isDigit, isLetter } from './isCharType'\n\n/**\n * Test for being a string consisting of letters and/or digits\n * @param {String} line\n * @returns {Boolean} consists of letters and/or digits only\n */\nconst isAlphaNumeric = line => {\n    return (\n        line &&\n        line.split &&\n        !line.split('').some(char => {\n            return !(isLetter(char) || isDigit(char))\n        })\n    )\n}\n\nexport { isAlphaNumeric }\n","\n/**\n * Check for a match covering the string entirely\n * @param {String} word\n * @param {RegExp} regex\n * @returns {Boolean}\n */\nconst isExactMatch = (word, regex) => {\n    const match = word.match(regex)\n    const result = match && match[0] === word\n    return result\n}\n\nexport { isExactMatch }\n"],"names":["isChar","char","Boolean","length","isDigit","match","isLetter","toLowerCase","toUpperCase","line","split","some","word","regex","isUsable","arguments","Array","from","forEach","value","Number","isFinite"],"mappings":"mMAMM,MCAAA,EAASC,GACJC,QAAQD,GAAwB,iBAATA,GAAqC,IAAhBA,EAAKE,QAQtDC,EAAUH,GACLD,EAAOC,IAASC,QAAQD,EAAKI,MAAM,UAQxCC,EAAWL,GACND,EAAOC,IAASA,EAAKM,gBAAkBN,EAAKO,+BClBhCC,GAEfA,GACAA,EAAKC,QACJD,EAAKC,MAAM,IAAIC,KAAKV,KACRK,EAASL,IAASG,EAAQH,2CCL1B,CAACW,EAAMC,KACxB,MAAMR,EAAQO,EAAKP,MAAMQ,GAEzB,OADeR,GAASA,EAAM,KAAOO,0BFwBzBX,GAERD,EAAOC,IACPA,IAASA,EAAKM,eACdN,IAASA,EAAKO,wBASNP,GAERD,EAAOC,IACPA,IAASA,EAAKO,eACdP,IAASA,EAAKM,+BD5CE,WACpB,IAAIO,EAAWZ,QAAQa,UAAUZ,QAKjC,OAJAa,MAAMC,KAAKF,WAAWG,QAAQC,IAC1BL,EACIA,GAA6B,iBAAVK,GAAsBC,OAAOC,SAASF,KAE1DL"}